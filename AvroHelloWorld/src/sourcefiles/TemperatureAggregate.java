/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package sourcefiles;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TemperatureAggregate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemperatureAggregate\",\"namespace\":\"sourcefiles\",\"fields\":[{\"name\":\"counter\",\"type\":\"int\"},{\"name\":\"record\",\"type\":{\"type\":\"record\",\"name\":\"TemperatureRecord\",\"fields\":[{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"temperature\",\"type\":\"double\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int counter;
  @Deprecated public sourcefiles.TemperatureRecord record;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TemperatureAggregate() {}

  /**
   * All-args constructor.
   */
  public TemperatureAggregate(java.lang.Integer counter, sourcefiles.TemperatureRecord record) {
    this.counter = counter;
    this.record = record;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return counter;
    case 1: return record;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: counter = (java.lang.Integer)value$; break;
    case 1: record = (sourcefiles.TemperatureRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'counter' field.
   */
  public java.lang.Integer getCounter() {
    return counter;
  }

  /**
   * Sets the value of the 'counter' field.
   * @param value the value to set.
   */
  public void setCounter(java.lang.Integer value) {
    this.counter = value;
  }

  /**
   * Gets the value of the 'record' field.
   */
  public sourcefiles.TemperatureRecord getRecord() {
    return record;
  }

  /**
   * Sets the value of the 'record' field.
   * @param value the value to set.
   */
  public void setRecord(sourcefiles.TemperatureRecord value) {
    this.record = value;
  }

  /** Creates a new TemperatureAggregate RecordBuilder */
  public static sourcefiles.TemperatureAggregate.Builder newBuilder() {
    return new sourcefiles.TemperatureAggregate.Builder();
  }
  
  /** Creates a new TemperatureAggregate RecordBuilder by copying an existing Builder */
  public static sourcefiles.TemperatureAggregate.Builder newBuilder(sourcefiles.TemperatureAggregate.Builder other) {
    return new sourcefiles.TemperatureAggregate.Builder(other);
  }
  
  /** Creates a new TemperatureAggregate RecordBuilder by copying an existing TemperatureAggregate instance */
  public static sourcefiles.TemperatureAggregate.Builder newBuilder(sourcefiles.TemperatureAggregate other) {
    return new sourcefiles.TemperatureAggregate.Builder(other);
  }
  
  /**
   * RecordBuilder for TemperatureAggregate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemperatureAggregate>
    implements org.apache.avro.data.RecordBuilder<TemperatureAggregate> {

    private int counter;
    private sourcefiles.TemperatureRecord record;

    /** Creates a new Builder */
    private Builder() {
      super(sourcefiles.TemperatureAggregate.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(sourcefiles.TemperatureAggregate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.counter)) {
        this.counter = data().deepCopy(fields()[0].schema(), other.counter);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.record)) {
        this.record = data().deepCopy(fields()[1].schema(), other.record);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TemperatureAggregate instance */
    private Builder(sourcefiles.TemperatureAggregate other) {
            super(sourcefiles.TemperatureAggregate.SCHEMA$);
      if (isValidValue(fields()[0], other.counter)) {
        this.counter = data().deepCopy(fields()[0].schema(), other.counter);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.record)) {
        this.record = data().deepCopy(fields()[1].schema(), other.record);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'counter' field */
    public java.lang.Integer getCounter() {
      return counter;
    }
    
    /** Sets the value of the 'counter' field */
    public sourcefiles.TemperatureAggregate.Builder setCounter(int value) {
      validate(fields()[0], value);
      this.counter = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'counter' field has been set */
    public boolean hasCounter() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'counter' field */
    public sourcefiles.TemperatureAggregate.Builder clearCounter() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'record' field */
    public sourcefiles.TemperatureRecord getRecord() {
      return record;
    }
    
    /** Sets the value of the 'record' field */
    public sourcefiles.TemperatureAggregate.Builder setRecord(sourcefiles.TemperatureRecord value) {
      validate(fields()[1], value);
      this.record = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'record' field has been set */
    public boolean hasRecord() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'record' field */
    public sourcefiles.TemperatureAggregate.Builder clearRecord() {
      record = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TemperatureAggregate build() {
      try {
        TemperatureAggregate record = new TemperatureAggregate();
        record.counter = fieldSetFlags()[0] ? this.counter : (java.lang.Integer) defaultValue(fields()[0]);
        record.record = fieldSetFlags()[1] ? this.record : (sourcefiles.TemperatureRecord) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

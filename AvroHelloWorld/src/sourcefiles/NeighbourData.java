/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package sourcefiles;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NeighbourData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NeighbourData\",\"namespace\":\"sourcefiles\",\"fields\":[{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public NeighbourData() {}

  /**
   * All-args constructor.
   */
  public NeighbourData(java.lang.CharSequence ip, java.lang.CharSequence type) {
    this.ip = ip;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ip;
    case 1: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ip = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /** Creates a new NeighbourData RecordBuilder */
  public static sourcefiles.NeighbourData.Builder newBuilder() {
    return new sourcefiles.NeighbourData.Builder();
  }
  
  /** Creates a new NeighbourData RecordBuilder by copying an existing Builder */
  public static sourcefiles.NeighbourData.Builder newBuilder(sourcefiles.NeighbourData.Builder other) {
    return new sourcefiles.NeighbourData.Builder(other);
  }
  
  /** Creates a new NeighbourData RecordBuilder by copying an existing NeighbourData instance */
  public static sourcefiles.NeighbourData.Builder newBuilder(sourcefiles.NeighbourData other) {
    return new sourcefiles.NeighbourData.Builder(other);
  }
  
  /**
   * RecordBuilder for NeighbourData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NeighbourData>
    implements org.apache.avro.data.RecordBuilder<NeighbourData> {

    private java.lang.CharSequence ip;
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(sourcefiles.NeighbourData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(sourcefiles.NeighbourData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ip)) {
        this.ip = data().deepCopy(fields()[0].schema(), other.ip);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing NeighbourData instance */
    private Builder(sourcefiles.NeighbourData other) {
            super(sourcefiles.NeighbourData.SCHEMA$);
      if (isValidValue(fields()[0], other.ip)) {
        this.ip = data().deepCopy(fields()[0].schema(), other.ip);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'ip' field */
    public java.lang.CharSequence getIp() {
      return ip;
    }
    
    /** Sets the value of the 'ip' field */
    public sourcefiles.NeighbourData.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ip = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ip' field */
    public sourcefiles.NeighbourData.Builder clearIp() {
      ip = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public sourcefiles.NeighbourData.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type' field */
    public sourcefiles.NeighbourData.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public NeighbourData build() {
      try {
        NeighbourData record = new NeighbourData();
        record.ip = fieldSetFlags()[0] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

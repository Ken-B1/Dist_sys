/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package sourcefiles;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public interface LightProtocol {
  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse("{\"protocol\":\"LightProtocol\",\"namespace\":\"sourcefiles\",\"types\":[],\"messages\":{\"changeState\":{\"request\":[],\"response\":\"boolean\"},\"getState\":{\"request\":[],\"response\":\"boolean\"},\"setNewServer\":{\"request\":[{\"name\":\"serverIp\",\"type\":\"string\"}],\"response\":\"string\"}}}");
  boolean changeState() throws org.apache.avro.AvroRemoteException;
  boolean getState() throws org.apache.avro.AvroRemoteException;
  java.lang.CharSequence setNewServer(java.lang.CharSequence serverIp) throws org.apache.avro.AvroRemoteException;

  @SuppressWarnings("all")
  public interface Callback extends LightProtocol {
    public static final org.apache.avro.Protocol PROTOCOL = sourcefiles.LightProtocol.PROTOCOL;
    void changeState(org.apache.avro.ipc.Callback<java.lang.Boolean> callback) throws java.io.IOException;
    void getState(org.apache.avro.ipc.Callback<java.lang.Boolean> callback) throws java.io.IOException;
    void setNewServer(java.lang.CharSequence serverIp, org.apache.avro.ipc.Callback<java.lang.CharSequence> callback) throws java.io.IOException;
  }
}